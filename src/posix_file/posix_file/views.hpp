/******************************************************************************
 * Copyright 2022-2023, Barcelona Supercomputing Center (BSC), Spain
 *
 * This software was partially supported by the EuroHPC-funded project ADMIRE
 *   (Project ID: 956748, https://www.admire-eurohpc.eu).
 *
 * This file is part of Cargo.
 *
 * Cargo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Cargo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Cargo.  If not, see <https://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *****************************************************************************/

#ifndef POSIX_FILE_VIEWS_HPP
#define POSIX_FILE_VIEWS_HPP

#include "types.hpp"
#include "ranges.hpp"
#include "views/block_iterator.hpp"
#include "views/strided_iterator.hpp"
#include <cstddef>
#include <algorithm>

namespace posix_file::views {

/**
 * A file view that includes all file offsets belonging to `[0, EOF)`.
 *
 * @remark Note that file offsets are generated by using a file's `EOF`
 * offset at the time the view is created. If the file changes its size after
 * the view is created, the offsets returned by the view may not necessarily
 * correspond to reality. Using them to access a file's underlying
 * data is  thus undefined behavior.
 *
 * @tparam File A file type.
 * @param f A file from which offsets will be extracted.
 * @return A view including all valid offsets from `f`.
 */
template <typename File>
auto
all_of(File&& f) {

    using ranges::iterator_range;
    using ranges::offset_iterator;

    return iterator_range{offset_iterator{0},
                          offset_iterator{std::forward<File>(f).eof()}};
}

/**
 * A file view that includes all file offsets belonging to `[start_offset,
 * end_offset)`.
 *
 * The value of `end_offset` will be either
 * `start_offset + requested_length` or `f.eof()` depending on which is smaller.
 *
 * @remark Note that file offsets are generated by using a file's `EOF`
 * offset at the time the view is created. If the file changes its size after
 * the view is created, the offsets returned by the view may not necessarily
 * correspond to reality. Using them to access a file's underlying
 * data is  thus undefined behavior.
 *
 * @tparam File A file type.
 * @param f A file from which offsets will be extracted.
 * @param start_offset The initial file offset for the view.
 * @param requested_length The requested length for the view.
 * @return A view including all valid offsets from `f` between
 * `[start_offset, min(start_offset + requested_length, f.eof())`.
 */
template <typename File>
auto
some_of(File&& f, offset start_offset, std::size_t requested_length) {

    using ranges::iterator_range;
    using ranges::offset_iterator;

    // we need to adjust for the file actually being smaller than
    // the requested length
    const auto length = std::min<std::size_t>(
            requested_length,
            std::max<offset_distance>(
                    0, posix_file::distance(start_offset,
                                            std::forward<File>(f).eof())));

    return iterator_range{offset_iterator{start_offset},
                          offset_iterator{start_offset + length}};
}

} // namespace posix_file::views

#endif // POSIX_FILE_VIEWS_HPP
